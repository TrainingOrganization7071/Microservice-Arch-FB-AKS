name: Universities Microservice Pipeline

on:
  push:
    paths:
      - 'Universities/**'
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

env: 
  MICROSERVICE_NAME : 'Universities'
  DOCKER_IMAGE_NAME : 'universities-microservice'
  DOCKER_IMAGE_TAG: 'latest'
  RESOURCE_GROUP: 'minimal_infra_auth'
  CLUSTER_NAME: 'aks-cluster'

jobs:
  # Build and test all Microservices
  Build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: ['20.x']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
            fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
        
      - name: Install dependencies
        run: |
          cd ./${{ env.MICROSERVICE_NAME }}
          npm ci
        
      - name: Run Build
        run: |
          cd ./${{ env.MICROSERVICE_NAME }}
          npm run build --if-present
        
      #- name: Run Tests
      #  run: |
      #    cd ./${{ env.MICROSERVICE_NAME }}
      #    npm run test --if-present
        
      - name: Upload build artifact for ${{ env.MICROSERVICE_NAME }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.MICROSERVICE_NAME }}-build
          path: ./${{ env.MICROSERVICE_NAME }}

     
  Deploy_To_DockerHub:
    runs-on: ubuntu-latest
    needs: Build
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full commit history, not a shallow clone

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./${{ env.MICROSERVICE_NAME }}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
          
          #tags: |
          #  ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}  # Tag with commit SHA
          #  ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.ref_name }}  # Tag with branch name
          ## Only tag as "latest" if on master branch
          #labels: |
          #  ${{ github.ref == 'refs/heads/master' && 'latest' }}

          #tags: |
          #  ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:v1.0.0  # Version tag
          #  ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest 


  Deploy_To_AKS:
    runs-on: ubuntu-latest
    needs: Deploy_To_DockerHub

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      # Use kubelogin to configure your kubeconfig for Azure auth
      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'
      
      # Login to Azure using the service principal credentials
      - name: Azure Login -> Creds
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Azure CLI script -> Account show
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show
      
      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'

      # Get Nodes - test
      - name: Get Nodes
        run: |
          kubectl get nodes

      # Deploys application based on given manifest file
      - name: Deploys application
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: ./${{ env.MICROSERVICE_NAME }}/k8s/deployment.yml







          