name: CI/CD Microservices Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:


jobs:
# Build and test all Microservices 
  Build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20.x']
        service: ['Books', 'Movies', 'News', 'Universities']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch full commit history, not a shallow clone

      - name: Check for changes in microservice
        id: check_changes
        run: |
          if git rev-parse --verify HEAD^ ; then
            # Compare against the previous commit
            git diff --name-only HEAD^ HEAD | grep -q "^${{ matrix.service }}/" && echo "changes=true" >> $GITHUB_ENV || echo "changes=false" >> $GITHUB_ENV
          else
            # First commit or no prior commit, compare against an empty tree
            git diff --name-only $(git hash-object -t tree /dev/null) HEAD | grep -q "^${{ matrix.service }}/" && echo "changes=true" >> $GITHUB_ENV || echo "changes=false" >> $GITHUB_ENV
          fi

      - name: Use Node.js
        if: env.changes == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
        
      - name: Install dependencies
        if: env.changes == 'true'
        run: |
          cd ./${{ matrix.service }}
          npm ci
        
      - name: Run Build
        if: env.changes == 'true'
        run: |
          cd ./${{ matrix.service }}
          npm run build --if-present
        
      #- name: Run Tests
      #  if: env.changes == 'true'
      #  run: |
      #    cd ./${{ matrix.service }}
      #    npm run test
        
      - name: Upload build artifact for ${{ matrix.service }}
        if: env.changes == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}-build
          path: ./${{ matrix.service }}

# Deploy All Microservice docker images to DockerHub      
  Deploy_To_DockerHub:
    runs-on: ubuntu-latest
    needs: Build
    strategy:
        matrix:
          service: ['Books', 'Movies', 'News', 'Universities']
          docker_image_name: ['books', 'movies', 'news', "universities"]
    env:
      DOCKER_IMAGE_TAG: 'latest'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full commit history, not a shallow clone

      - name: Check for changes in microservice
        id: check_changes
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q "^${{ matrix.service }}/"; then
            echo "changes=true" >> $GITHUB_ENV
          else
            echo "changes=false" >> $GITHUB_ENV
          fi

      - name: Set up QEMU
        if: env.changes == 'true'
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        if: env.changes == 'true'
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        if: env.changes == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        if: env.changes == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./${{matrix.service}}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.docker_image_name }}-microservice:${{ env.DOCKER_IMAGE_TAG }}





## Deploy All Microservice docker images to ACR
#  Deploy_To_ACR:
#    name: 'Build and Push to ACR'
#    runs-on: ubuntu-latest
#        
#    defaults:
#      run:
#        shell: bash
#        
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#         fetch-depth: 0
#        
#      - name: Docker Login
#        uses: azure/docker-login@v1
#        with:
#          login-server: ${{ secrets.ACR_URL }}
#          username: ${{ secrets.ACR_USERNAME }}
#          password: ${{ secrets.ACR_PASSWORD }}
#        
#      - run: |
#          docker build -t nodejs-app .
#          docker tag nodejs-app ${{ secrets.ACR_URL }}/nodejs-app:${{ github.sha }}
#          docker push ${{ secrets.ACR_URL }}/nodejs-app:${{ github.sha }}
#
## Deploy All Microservice in Web APP
#  Deploy_To_WebApp:
#    permissions:
#      contents: none
#    runs-on: ubuntu-latest
#    needs: Build
#    environment:
#      name: 'Development'
#      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
#
#    steps:
#      - name: Download artifact from build job
#        uses: actions/download-artifact@v3
#        with:
#          name: node-app
#
#      - name: 'Deploy to Azure WebApp'
#        id: deploy-to-webapp
#        uses: azure/webapps-deploy@v2
#        with:
#          app-name: ${{ env.AZURE_WEBAPP_NAME }}
#          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
#          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}








