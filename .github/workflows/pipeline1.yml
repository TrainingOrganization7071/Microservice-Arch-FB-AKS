name: CI/CD Microservices Pipeline

on:
  #push:
  #  branches:
  #    - master
  #pull_request:
  #  branches:
  #    - master
  workflow_dispatch:
  
env: 
  DOCKER_IMAGE_TAG: 'latest'
  RESOURCE_GROUP: 'minimal_infra_auth'
  CLUSTER_NAME: 'aks-cluster'

jobs:
# Build and test all Microservices 
  Build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20.x']
        service: ['Books', 'Movies', 'News', 'Universities']
    steps:
      - name: Check for changes in microservice
        uses: ./.github/workflows/check-changes.yml
        with:
          service: ${{ matrix.service }}

      - name: Use Node.js
        if: env.changes == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
        
      - name: Install dependencies
        if: env.changes == 'true'
        run: |
          cd ./${{ matrix.service }}
          npm ci
        
      - name: Run Build
        if: env.changes == 'true'
        run: |
          cd ./${{ matrix.service }}
          npm run build --if-present
        
      #- name: Run Tests
      #  if: env.changes == 'true'
      #  run: |
      #    cd ./${{ matrix.service }}
      #    npm run test
        
      - name: Upload build artifact for ${{ matrix.service }}
        if: env.changes == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}-build
          path: ./${{ matrix.service }}



# Deploy All Microservice docker images to DockerHub      
  Deploy_To_DockerHub:
    runs-on: ubuntu-latest
    needs: Build
    strategy:
        matrix:
          service: ['Books', 'Movies', 'News', 'Universities']
          docker_image_name: ['books', 'movies', 'news', "universities"]

    steps:
      - name: Check for changes in microservice
        uses: ./.github/workflows/check-changes.yml
        with:
          service: ${{ matrix.service }}

      - name: Set up QEMU
        if: env.changes == 'true'
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        if: env.changes == 'true'
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        if: env.changes == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        if: env.changes == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./${{matrix.service}}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.docker_image_name }}-microservice:${{ env.DOCKER_IMAGE_TAG }}
  


# Deploy All Microservice docker images to ACR
  Deploy_To_ACR:
    name: 'Build and Push to ACR'
    runs-on: ubuntu-latest
    needs: Deploy_To_DockerHub
    strategy:
      matrix:
        service: ['Books', 'Movies', 'News', 'Universities']
        docker_image_name: ['books','movies', 'news', 'universities']  

    defaults:
      run:
        shell: bash
        
    steps:
      - name: Check for changes in microservice
        uses: ./.github/workflows/check-changes.yml
        with:
          service: ${{ matrix.service }}
        
      - name: Docker Login
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_URL }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
        
      - run: |
          docker build -t ${{ matrix.docker_image_name }}-microservice  ./${{ matrix.service }}
          docker tag nodejs-app ${{ secrets.ACR_URL }}/${{ matrix.docker_image_name }}-microservice:${{ env.DOCKER_IMAGE_TAG }}
          docker push ${{ secrets.ACR_URL }}/nodejs-app:${{ env.DOCKER_IMAGE_TAG }}



# Deploy to Azure Kubernetes Cluster
  Deploy_To_AKS:
    runs-on: ubuntu-latest
    needs: Deploy_To_ACR
    strategy:
      matrix:
        service: ['Books', 'Movies', 'News', 'Universities']
        docker_image_name: ['books','movies', 'news', 'universities']

    steps:
      - name: Check for changes in microservice
        uses: ./.github/workflows/check-changes.yml
        with:
          service: ${{ matrix.service }}

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      # Use kubelogin to configure your kubeconfig for Azure auth
      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'
        
      # Login to Azure using the service principal credentials
      - name: Azure Login -> Creds
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
      
      # Just to test if github action returns secrets in clear
      - name: Azure CLI script -> Account show
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show
        
      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'

      # Get Nodes - test
      - name: Get Nodes
        run: |
          kubectl get nodes

      # Deploys application based on given manifest file
      - name: Deploys application
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: ./${{ matrix.service }}/k8s/deployment.yml

      #- name: Wait for the deployment to complete
      #  run: |
      #    kubectl rollout status deployment/${{ matrix.service }} --watch
      #
      #- name: Get deployment status
      #  run: |
      #    kubectl get deployment/${{ matrix.service }} -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}'














# Selenium Testing 
#  Selenium:
#    name: 'Run Selenium Tests'
#    runs-on: ubuntu-latest
#    needs: Build
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0  # Fetch full commit history, not a shallow clone
#
#      - name: Install dependencies
#        run: sudo apt-get update && sudo apt-get install -y wget unzip
#
#      - name: Install Chrome
#        run: |
#          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
#          sudo apt install -y ./google-chrome-stable_current_amd64.deb
#
#      - name: Install Chrome Driver
#        run: |
#          CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+')
#          CHROME_DRIVER_VERSION=$(curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION)
#          wget -N https://chromedriver.storage.googleapis.com/$CHROME_DRIVER_VERSION/chromedriver_linux64.zip
#          unzip chromedriver_linux64.zip -d /usr/local/bin/
#          rm chromedriver_linux64.zip
#
#      - name: Install Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: '20.x'
#
#      - name: Install Cypress dependencies
#        run: npm install cypress
#
#      - name: Run Cypress tests
#        run: npx cypress run --headless
#        env:
#          CYPRESS_BASE_URL: 'http://localhost:3000'  # Update with your base URL if needed
#
#      - name: Upload screenshots
#        if: failure()
#        uses: actions/upload-artifact@v3
#        with:
#          name: screenshots
#          path: cypress/screenshots
#
#      - name: Upload videos
#        if: always()
#        uses: actions/upload-artifact@v3
#        with:
#          name: videos
#          path: cypress/videos

      







