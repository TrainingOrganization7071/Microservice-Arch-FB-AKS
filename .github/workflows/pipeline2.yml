name: Optimized CI/CD Microservices Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
  
  
env:
  DOCKER_IMAGE_TAG: 'latest'
  RESOURCE_GROUP: 'minimal_infra_auth'
  CLUSTER_NAME: 'aks-cluster'
  ACR_NAME: 'containerRegistry1xvvkszxu' # ACR service name


jobs:
# Build and test all Microservices 
  Build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20.x']
        service: ['Books', 'Movies', 'News', 'Universities']
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full commit history, not a shallow clone

      #- name: Check for changes in microservice
      #  id: check_changes
      #  uses: ./.github/workflows/action.yml
      #  with:
      #    service: ${{ matrix.service }}

      - name: Check for changes in microservice
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q "^${{ matrix.service }}/"; then
            echo "changes=true" >> $GITHUB_ENV
          else
            echo "changes=false" >> $GITHUB_ENV
          fi

      - name: Use Node.js
        if: env.changes == 'true' 
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
        
      - name: Install dependencies
        if: env.changes == 'true' 
        run: |
          cd ./${{ matrix.service }}
          npm ci
        
      - name: Run Build
        if: env.changes == 'true' 
        run: |
          cd ./${{ matrix.service }}
          npm run build --if-present
      
      # Upload the build artifacts
      #- name: Upload build artifact for ${{ matrix.service }}
      #  if: env.changes == 'true' 
      #  uses: actions/upload-artifact@v3
      #  with:
      #    name: ${{ matrix.service }}-build
      #    path: ./${{ matrix.service }}


# Deploy All Microservice docker images to ACR
  Deploy_To_ACR:
    name: 'Build and Push to ACR'
    runs-on: ubuntu-latest
    needs: Build
    strategy:
      matrix:
        include: # Map a specific service to its corresponding docker_image_name
          - service: 'Books'
            docker_image_name: 'books'
          - service: 'Movies'
            docker_image_name: 'movies'
          - service: 'News'
            docker_image_name: 'news'
          - service: 'Universities'
            docker_image_name: 'universities' 

    defaults:
      run:
        shell: bash
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full commit history, not a shallow clone
        
      - name: Check for changes in microservice
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q "^${{ matrix.service }}/"; then
          echo "changes=true" >> $GITHUB_ENV
          else
            echo "changes=false" >> $GITHUB_ENV
          fi
          
      - name: Azure ACR [Docker Rejistry] Login
        if: env.changes == 'true' 
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Display the content of the Dockerfile
      - name: Display Dockerfile content
        if: env.changes == 'true' 
        run: |
           cat ./${{ matrix.service }}/Dockerfile

      - name: Build Docker Image
        if: env.changes == 'true' 
        run: |
          docker build -t ${{ matrix.docker_image_name }}-microservice:${{ env.DOCKER_IMAGE_TAG }} ./${{ matrix.service }}
         
      - name: Tag Docker Image for ACR
        if: env.changes == 'true' 
        run: |
          docker tag ${{ matrix.docker_image_name }}-microservice:${{ env.DOCKER_IMAGE_TAG }}  ${{ env.ACR_NAME }}.azurecr.io/${{ matrix.docker_image_name }}-microservice:${{ env.DOCKER_IMAGE_TAG }}
  
      - name: Push Docker Image to ACR
        if: env.changes == 'true' 
        run: |
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ matrix.docker_image_name }}-microservice:${{ env.DOCKER_IMAGE_TAG }}
              

# Deploy to Azure Kubernetes Cluster
  Deploy_To_AKS:
    runs-on: ubuntu-latest
    needs: [ Deploy_To_ACR ]
    strategy:
      matrix:
        include: # Map a specific service to its corresponding docker_image_name
          - service: 'Books'
            docker_image_name: 'books'
          - service: 'Movies'
            docker_image_name: 'movies'
          - service: 'News'
            docker_image_name: 'news'
          - service: 'Universities'
            docker_image_name: 'universities' 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full commit history, not a shallow clone
        
      - name: Check for changes in microservice
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q "^${{ matrix.service }}/"; then
            echo "changes=true" >> $GITHUB_ENV
          else
            echo "changes=false" >> $GITHUB_ENV
          fi

      - name: Install Azure CLI
        if: env.changes == 'true' 
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      # Use kubelogin to configure your kubeconfig for Azure auth
      - name: Set up kubelogin for non-interactive login
        if: env.changes == 'true' 
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'
        
      # Login to Azure using the service principal credentials
      - name: Azure Login -> Creds
        if: env.changes == 'true' 
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

          
      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        if: env.changes == 'true' 
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'
      
      # Install kubectl manually
      - name: Install kubectl
        if: env.changes == 'true'
        run: |
          sudo az aks install-cli

      #az aks update -n <aks-cluster-name> -g <resource-group-name> --attach-acr <acr-name>
      #- name: Update ACR in AKS
      #  if: env.changes == 'true' 
      #  run: |
      #    az aks update -n ${{ env.CLUSTER_NAME }} -g ${{ env.RESOURCE_GROUP }} --attach-acr ${{ env.ACR_NAME }}

      # Get Nodes - test
      - name: Get Nodes
        if: env.changes == 'true'
        run: |
          kubectl get nodes
      
      # ECHO - test
      - name: ECHO
        if: env.changes == 'true'
        run: |
          echo  "--------------------------------"
          echo  "--------------------------------"
          

      # Replace the placeholders in the Kubernetes manifest with the actual ACR URL, image name, and tag
      - name: Replace image placeholders in deployment.yml
        if: env.changes == 'true'
        run: |
          sed -i 's|ACR_URL_PLACEHOLDER|${{ env.ACR_NAME }}.azurecr.io|g' ./${{ matrix.service }}/k8s/deployment.yml
          sed -i 's|IMAGE_NAME_PLACEHOLDER|${{ matrix.docker_image_name }}-microservice|g' ./${{ matrix.service }}/k8s/deployment.yml
          sed -i 's|IMAGE_TAG_PLACEHOLDER|${{ env.DOCKER_IMAGE_TAG }}|g' ./${{ matrix.service }}/k8s/deployment.yml
      
      # ECHO Deployment.yml - Display Content of Manifest
      - name: Echo Deployment Manifest
        if: env.changes == 'true'
        run: |
          echo "Displaying the content of the deployment manifest for ${{ matrix.service }}:"
          cat ./${{ matrix.service }}/k8s/deployment.yml

      # Deploys application based on given manifest file
      - name: Deploys application
        if: env.changes == 'true' 
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: ./${{ matrix.service }}/k8s/deployment.yml
          force: true  # Force redeployment even if deployment already exists


      # Step 4: Deploy to AKS
      #- name: Deploy to AKS
      #  id: deploy-aks
      #  uses: Azure/k8s-deploy@v4
      #  with:
      #    namespace: 'default'
      #    manifests: |
      #        ./${{ matrix.service }}/k8s/deployment.yml
      #    images: '${{ env.ACR_NAME }}.azurecr.io/${{ matrix.docker_image_name }}-microservice:${{ env.DOCKER_IMAGE_TAG }}'
      #    pull-images: true









